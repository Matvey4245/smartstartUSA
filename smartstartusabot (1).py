





import os
import asyncio
import re
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, Text
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
TOKEN = os.environ.get("TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

### FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è

class ConsultForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_phone_code = State()
    waiting_for_email = State()
    waiting_for_date = State()
    waiting_for_time = State()

class QuizForm(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    visa_type = State()
    has_invite = State()
    was_in_us = State()
    income = State()
    family = State()
    refusals = State()

### –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ì–∞–π–¥", callback_data="/guide"),
            InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="/consult"),
            InlineKeyboardButton(text="SSN", callback_data="/ssn"),
        ],
        [
            InlineKeyboardButton(text="–ê–¥—Ä–µ—Å", callback_data="/address"),
            InlineKeyboardButton(text="–ë–∞–Ω–∫", callback_data="/bank"),
            InlineKeyboardButton(text="–°–∏–º-–∫–∞—Ä—Ç–∞", callback_data="/phone"),
        ],
        [
            InlineKeyboardButton(text="–ñ–∏–ª—å—ë", callback_data="/housing"),
            InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞", callback_data="/job"),
            InlineKeyboardButton(text="–û—à–∏–±–∫–∏", callback_data="/errors"),
        ],
        [
            InlineKeyboardButton(text="–ì–ª–æ—Å—Å–∞—Ä–∏–π", callback_data="/glossary"),
            InlineKeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="/english"),
            InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="/about"),
        ],
        [
            InlineKeyboardButton(text="–ö–≤–∏–∑: —à–∞–Ω—Å –≤–∏–∑—ã", callback_data="/quiz"),
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="/help")
        ]
    ])
    return kb

### –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è FAQ –∏ –≥–∞–π–¥-–±–ª–æ–∫–æ–≤
async def send_faq(message, text):
    await message.answer(text, reply_markup=main_menu())

### –°—Ç–∞—Ä—Ç –∏ help
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç Smart Start USA üá∫üá∏\n"
        "–ü–æ–º–æ–≥–∞—é –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–®–ê: –∂–∏–ª—å—ë, —Ä–∞–±–æ—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª üëá", reply_markup=main_menu())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await send_faq(message, "üÜò –ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/guide ‚Äî –ì–∞–π–¥ –ø–æ –ø–µ—Ä–µ–µ–∑–¥—É\n"
        "/consult ‚Äî –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "/ssn ‚Äî –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å SSN\n"
        "/address ‚Äî –ö–∞–∫ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å\n"
        "/bank ‚Äî –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç\n"
        "/phone ‚Äî –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–º–∫—É\n"
        "/housing ‚Äî –ö–∞–∫ –Ω–∞–π—Ç–∏ –∂–∏–ª—å—ë\n"
        "/job ‚Äî –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã\n"
        "/errors ‚Äî –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏\n"
        "/glossary ‚Äî –ì–ª–æ—Å—Å–∞—Ä–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
        "/english ‚Äî –ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n"
        "/about ‚Äî –û –ø—Ä–æ–µ–∫—Ç–µ\n"
        "/quiz ‚Äî –ö–≤–∏–∑ ¬´—à–∞–Ω—Å –≤–∏–∑—ã¬ª\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.")

### –ì–∞–π–¥—ã
@dp.message(Command("guide"))
async def cmd_guide(message: types.Message): await send_faq(message,
    "üìò –ì–∞–π–¥ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ –°–®–ê\n\n"
    "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–µ–∑–¥—É –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ –°–®–ê. –ú—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º:\n"
    "‚Äî –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å —à—Ç–∞—Ç\n‚Äî –∫–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –¥–æ –≤—ã–ª–µ—Ç–∞\n‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é\n‚Äî –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∂–∏–ª—å—ë, —Ä–∞–±–æ—Ç—É.")

@dp.message(Command("ssn"))
async def cmd_ssn(message: types.Message): await send_faq(message,
    "üßæ –ü–æ–ª—É—á–µ–Ω–∏–µ SSN (Social Security Number)\n\n"
    "SSN ‚Äî –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –°–®–ê –¥–ª—è —Ä–∞–±–æ—Ç—ã, –Ω–∞–ª–æ–≥–æ–≤, –±–∞–Ω–∫–æ–≤.\n"
    "‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ SSA (—á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É)\n‚Ä¢ –ù—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã (–ø–∞—Å–ø–æ—Ä—Ç, —Å—Ç–∞—Ç—É—Å, –∞–¥—Ä–µ—Å)\n‚Ä¢ SSN –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ –ø–æ—á—Ç–µ –∑–∞ 2‚Äì4 –Ω–µ–¥–µ–ª–∏.")

@dp.message(Command("address"))
async def cmd_address(message: types.Message): await send_faq(message,
    "üìÆ –£–∫–∞–∑–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –°–®–ê\n\n"
    "–ê–¥—Ä–µ—Å –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (SSN, EAD –∏ –¥—Ä).\n"
    "‚Ä¢ –î—Ä—É–∑—å—è/–∑–Ω–∞–∫–æ–º—ã–µ, –ø–ª–∞—Ç–Ω—ã–µ –ø–æ—á—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∂–∏–ª—å—ë.\n"
    "–í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—á—Ç–∞ –º–æ–∂–µ—Ç —Ç–µ—Ä—è—Ç—å—Å—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–µ–π!")

@dp.message(Command("bank"))
async def cmd_bank(message: types.Message): await send_faq(message,
    "üè¶ –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ –≤ –°–®–ê\n\n"
    "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∞–Ω–∫–∏: BoA, Chase, Wells Fargo\n"
    "‚Ä¢ –ß–∞—Å—Ç–æ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–∞—Å–ø–æ—Ä—Ç –∏ –∞–¥—Ä–µ—Å\n"
    "‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∞–Ω–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —Å—á—ë—Ç –±–µ–∑ SSN.")

@dp.message(Command("phone"))
async def cmd_phone(message: types.Message): await send_faq(message,
    "üì± SIM-–∫–∞—Ä—Ç–∞ –∏ –Ω–æ–º–µ—Ä\n\n"
    "‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: T-Mobile, AT&T, Verizon\n"
    "‚Ä¢ –ë—é–¥–∂–µ—Ç–Ω–æ: Mint Mobile, Visible\n"
    "‚Ä¢ SIM –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω.")

@dp.message(Command("housing"))
async def cmd_housing(message: types.Message): await send_faq(message,
    "üè† –ñ–∏–ª—å—ë –≤ –°–®–ê\n\n"
    "‚Ä¢ –°–∞–π—Ç—ã: Zillow, Craigslist, Facebook Marketplace\n"
    "‚Ä¢ –ß–∞—Å—Ç–æ –Ω—É–∂–µ–Ω –ø–æ—Ä—É—á–∏—Ç–µ–ª—å –∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç\n"
    "‚Ä¢ Airbnb ‚Äî —Ö–æ—Ä–æ—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è.")

@dp.message(Command("job"))
async def cmd_job(message: types.Message): await send_faq(message,
    "üíº –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –≤ –°–®–ê\n\n"
    "‚Ä¢ indeed.com, linkedin.com, craigslist.org\n"
    "‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ —Ä–µ–∑—é–º–µ, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –º–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä.\n"
    "–í–Ω–∏–º–∞–Ω–∏–µ: —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å—é –≤–∞–∫–∞–Ω—Å–∏–∏.")

@dp.message(Command("errors"))
async def cmd_errors(message: types.Message): await send_faq(message,
    "‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏–º–º–∏–≥—Ä–∞–Ω—Ç–æ–≤\n\n"
    "‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ SSN –∏ –∞–¥—Ä–µ—Å–∞\n"
    "‚Ä¢ –î–æ–≤–µ—Ä—è—é—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞–º\n"
    "‚Ä¢ –ù–µ —Å—á–∏—Ç–∞—é—Ç –±—é–¥–∂–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–µ –º–µ—Å—è—Ü—ã.")

@dp.message(Command("glossary"))
async def cmd_glossary(message: types.Message): await send_faq(message,
    "üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π –∏–º–º–∏–≥—Ä–∞–Ω—Ç–∞\n\n"
    "SSN, EAD, I-94, asylum, TPS, USCIS, SSA –∏ –¥—Ä. ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ —à–ø–∞—Ä–≥–∞–ª–∫—É.")

@dp.message(Command("english"))
async def cmd_english(message: types.Message): await send_faq(message,
    "üá∫üá∏ –ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\n"
    "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ ESL-–∫—É—Ä—Å—ã –æ—Ç –∫–æ–ª–ª–µ–¥–∂–µ–π –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫\n"
    "‚Ä¢ –û–Ω–ª–∞–π–Ω-—Ä–µ—Å—É—Ä—Å—ã: Duolingo, BBC Learning, LingQ\n"
    "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.")

@dp.message(Command("about"))
async def cmd_about(message: types.Message): await send_faq(message,
    "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ Smart Start USA\n\n"
    "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ —ç–º–∏–≥—Ä–∞–Ω—Ç–æ–≤. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –Ω–æ–≤–∏—á–∫–æ–≤, –≥–æ—Ç–æ–≤–∏–º –≥–∞–π–¥—ã –∏ —à–∞–±–ª–æ–Ω—ã, –ø—Ä–æ–≤–æ–¥–∏–º –∫—É—Ä—Å—ã.")

### --- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: FSM —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email, –¥–∞—Ç–æ–π, –≤—Ä–µ–º–µ–Ω–µ–º ---
@dp.message(Command("consult"))
async def consult_start(message: types.Message, state: FSMContext):
    await message.answer("–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(ConsultForm.waiting_for_name)

@dp.message(ConsultForm.waiting_for_name)
async def consult_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +12345678900):")
    await state.set_state(ConsultForm.waiting_for_phone)

@dp.message(ConsultForm.waiting_for_phone)
async def consult_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r"^\+?\d{10,15}$", phone):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +12345678900):")
        return
    code = str(random.randint(1000, 9999))
    await state.update_data(user_phone=phone, confirm_code=code)
    await message.answer(f"üü¢ –ù–∞ –Ω–æ–º–µ—Ä {phone} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (—Ç–µ—Å—Ç: {code}). –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:")
    await state.set_state(ConsultForm.waiting_for_phone_code)

@dp.message(ConsultForm.waiting_for_phone_code)
async def consult_phone_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text.strip() == data['confirm_code']:
        await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email:")
        await state.set_state(ConsultForm.waiting_for_email)
    else:
        await message.answer("‚ùó –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

@dp.message(ConsultForm.waiting_for_email)
async def consult_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(r"^[-\w.]+@([A-z0-9][-A-z0-9]+\.)+[A-z]{2,}$", email):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–ø—Ä–∏–º–µ—Ä: user@email.com):")
        return
    await state.update_data(user_email=email)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=await SimpleCalendar().start_calendar())
    await state.set_state(ConsultForm.waiting_for_date)

@dp.callback_query(SimpleCalendarCallback.filter(), ConsultForm.waiting_for_date)
async def consult_calendar(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(call, callback_data)
    if selected:
        await state.update_data(consult_date=date.strftime("%d.%m.%Y"))
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=time, callback_data=f"consult_time:{time}")]
            for time in ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"]
        ])
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=kb)
        await state.set_state(ConsultForm.waiting_for_time)

@dp.callback_query(Text(startswith="consult_time:"), ConsultForm.waiting_for_time)
async def consult_time(call: types.CallbackQuery, state: FSMContext):
    time = call.data.split(":")[1]
    await state.update_data(consult_time=time)
    data = await state.get_data()
    await call.message.answer(
        f"üéâ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é {data['consult_date']} –≤ {time}.\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞ email: {data['user_email']}. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {data['user_phone']}")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    msg = (f"üÜï –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
        f"–ò–º—è: {data['user_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['user_phone']}\n"
        f"Email: {data['user_email']}\n"
        f"–î–∞—Ç–∞: {data['consult_date']}\n"
        f"–í—Ä–µ–º—è: {data['consult_time']}")
    await bot.send_message(ADMIN_ID, msg)
    await state.clear()
    await call.answer()

### --- –ö–≤–∏–∑: —à–∞–Ω—Å –≤–∏–∑—ã ---
@dp.message(Command("quiz"))
async def quiz_start(message: types.Message, state: FSMContext):
    await message.answer("üö¶ –ö–≤–∏–∑: –£–∑–Ω–∞–π —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∑—ã –≤ –°–®–ê!\n\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +12345678900):")
    await state.set_state(QuizForm.waiting_for_phone)

@dp.callback_query(Text("/quiz"))
async def quiz_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("üö¶ –ö–≤–∏–∑: –£–∑–Ω–∞–π —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∑—ã –≤ –°–®–ê!\n\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +12345678900):")
    await state.set_state(QuizForm.waiting_for_phone)
    await call.answer()

@dp.message(QuizForm.waiting_for_phone)
async def quiz_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r"^\+?\d{10,15}$", phone):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +12345678900):")
        return
    code = str(random.randint(1000, 9999))
    await state.update_data(user_phone=phone, confirm_code=code)
    await message.answer(f"üü¢ –ù–∞ –Ω–æ–º–µ—Ä {phone} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (—Ç–µ—Å—Ç: {code}). –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∂–µ:")
    await state.set_state(QuizForm.waiting_for_code)

@dp.message(QuizForm.waiting_for_code)
async def quiz_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text.strip() == data['confirm_code']:
        await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n1/7. –î–ª—è –∫–∞–∫–æ–π –≤–∏–∑—ã –≤—ã –ø–æ–¥–∞—ë—Ç–µ?\n1 ‚Äî –¢—É—Ä–∏–∑–º\n2 ‚Äî –£—á—ë–±–∞\n3 ‚Äî –†–∞–±–æ—Ç–∞\n4 ‚Äî –í–æ—Å—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ–º—å–∏")
        await state.set_state(QuizForm.visa_type)
    else:
        await message.answer("‚ùó –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

@dp.message(QuizForm.visa_type)
async def quiz_visa_type(message: types.Message, state: FSMContext):
    await state.update_data(visa_type=message.text.strip())
    await message.answer("2/7. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(QuizForm.has_invite)

@dp.message(QuizForm.has_invite)
async def quiz_has_invite(message: types.Message, state: FSMContext):
    await state.update_data(has_invite=message.text.lower())
    await message.answer("3/7. –ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å –≤–∏–∑—ã –≤ –°–®–ê –∏–ª–∏ —à–µ–Ω–≥–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(QuizForm.was_in_us)

@dp.message(QuizForm.was_in_us)
async def quiz_was_in_us(message: types.Message, state: FSMContext):
    await state.update_data(was_in_us=message.text.lower())
    await message.answer("4/7. –í–∞—à –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü –≤ $ (–ø—Ä–∏–º–µ—Ä: 1000):")
    await state.set_state(QuizForm.income)

@dp.message(QuizForm.income)
async def quiz_income(message: types.Message, state: FSMContext):
    await state.update_data(income=message.text.strip())
    await message.answer("5/7. –°–µ–º—å—è (–∂–µ–Ω–∞/–¥–µ—Ç–∏/—Ä–æ–¥–∏—Ç–µ–ª–∏) –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ —Ä–æ–¥–∏–Ω–µ? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(QuizForm.family)

@dp.message(QuizForm.family)
async def quiz_family(message: types.Message, state: FSMContext):
    await state.update_data(family=message.text.lower())
    await message.answer("6/7. –ë—ã–ª–∏ –ª–∏ –æ—Ç–∫–∞–∑—ã –ø–æ –≤–∏–∑–∞–º –≤ –°–®–ê –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(QuizForm.refusals)

@dp.message(QuizForm.refusals)
async def quiz_refusals(message: types.Message, state: FSMContext):
    await state.update_data(refusals=message.text.lower())
    data = await state.get_data()
    score = 0
    if data['visa_type'] == "1":
        score += 2
    if data['has_invite'] == "–¥–∞":
        score += 2
    if data['was_in_us'] == "–¥–∞":
        score += 2
    try:
        if int(data['income']) >= 1500:
            score += 2
        elif int(data['income']) >= 700:
            score += 1
    except:
        pass
    if data['family'] == "–¥–∞":
        score += 1
    if data['refusals'] == "–Ω–µ—Ç":
        score += 2
    percent = int(score * 100 / 11)
    if percent >= 80:
        result = f"–í–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∑—ã ‚Äî {percent}%\nüëç –û—Ç–ª–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≥—Ä–∞–º–æ—Ç–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã."
    elif percent >= 50:
        result = f"–í–∞—à —à–∞–Ω—Å ‚Äî {percent}%\nüëå –í—Å—ë —Ä–µ–∞–ª—å–Ω–æ, –Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏—é —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏–Ω–æ–π."
    else:
        result = f"–í–∞—à —à–∞–Ω—Å ‚Äî {percent}%\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ —Å–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n{result}\n\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /consult –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é.")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_msg = (f"üìù –ü—Ä–æ—à–ª–∏ –∫–≤–∏–∑ –Ω–∞ —à–∞–Ω—Å –≤–∏–∑—ã:\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['user_phone']}\n"
        f"–í–∏–∑–∞: {data['visa_type']}\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {data['has_invite']}\n"
        f"–í–∏–∑—ã –≤ –°–®–ê/—à–µ–Ω–≥–µ–Ω: {data['was_in_us']}\n"
        f"–î–æ—Ö–æ–¥: {data['income']}\n"
        f"–°–µ–º—å—è –æ—Å—Ç–∞—ë—Ç—Å—è: {data['family']}\n"
        f"–û—Ç–∫–∞–∑—ã: {data['refusals']}\n"
        f"–®–∞–Ω—Å (–æ—Ü–µ–Ω–∫–∞): {percent}%")
    await bot.send_message(ADMIN_ID, admin_msg)
    await state.clear()

### --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query()
async def menu_callback(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    # –î–ª—è –∫–æ–º–∞–Ω–¥ ‚Äî –≤—ã–∑–æ–≤–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
    cmd_map = {
        "/guide": cmd_guide,
        "/consult": consult_start,
        "/ssn": cmd_ssn,
        "/address": cmd_address,
        "/bank": cmd_bank,
        "/phone": cmd_phone,
        "/housing": cmd_housing,
        "/job": cmd_job,
        "/errors": cmd_errors,
        "/glossary": cmd_glossary,
        "/english": cmd_english,
        "/about": cmd_about,
        "/help": cmd_help,
        "/quiz": quiz_callback,
    }
    if data in cmd_map:
        await cmd_map[data](call.message, state) if data != "/quiz" else await quiz_callback(call, state)
    await call.answer()

### --- Fallback –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ ---
@dp.message()
async def fallback(message: types.Message):
    await message.answer("‚ö†Ô∏è –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=main_menu())

### --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


